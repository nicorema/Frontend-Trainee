* WebComponents (concept/shadow DOM)

Web Components son una serie de tecnologias que permitan la creación de elementos reutilizables con su funcionalidad encapsulada del resto del codigo.

Utiliza 3 conceptos.

- Custom Elements: Un conjunto de APIs de JS que permite definir elementos custom y su respectivo comportamiento.
-* Shadow DOM: Un Dom diferente y oculto que se une a un elemento.
		Para unir un shadow DOM a un elemento se usa Element.attachShadow(), este metodo recibe como parametro un objeto con una opcion mode, que puese ser open o closed. Open significa que se puede manipular el shadow Dom desde el contexto del elemento, closed significa que esta de cierto modo protegido
-HTML Templates.

Shadow Dom: Encapsula un DOM escondido y separado al web component.
	Terminologia:
		-Shadow host: El nodo del DOM normal al que el shadow Dom esta unido.
		-Shadow tree: El arbol dentro del shadow DOM.
		-Shadow boundary: Done el shadow DOM termina y el DOM regular inicia.
		-Shadow root: El nodo raiz del shadow tree.

Se pueden modificar los elementos del shadow DOM de manera normal. Pero nada del shadow DOM puede modificar el DOM regular (Nada por fuera del boundary).

Se puede adjuntar un shadow root a cualquier elemento usando Element.attachShadow(). Dicha función tiene como parametro un objeto de opciones con la opción mode.
	- {mode: open} => Se puede acceder al shadow DOM escribiendo js en la pagina principal
	- {mode: closed} => No se puede sacceder al shadow DOM (Ej: <video> ).



* Custom Elements:

	Es un objeto que permite registrar un elemento custom a las paginas

	 - Para definir un elemento custom se utiliza:  customElements.define()
	Este metodo recibe 3 parametros:
		- nombre del elemento: DOMString (La especificación requiere que tengan un guion my-popup)
		- funcionalidad: class ( La clase que se encarga de manejar la funcionalidad del elemento)
		- padre: objeto de opciones con {extends: 'elemento del que hereda'} (opcional)

	- Hay dos tipos de custom elements.

		- Autonomous custom elements: Son standalone, no heredan de elementos HTML ( <popup-info> )
		- Customized built-in elements: Heredan de elementos HTML (uso : <p is="word-count"> )

* Template: 

	Se pueden usar las etiquetas <template> y <slot> para crear templates que pueden ser usadas para popular el shadow DOM de un web component

	<template> => No se renderiza en el DOM pero puede ser referenciado utilizando JS
	<slot> => Se utiliza para hacer plantillas mas dinamicas.
			- Dentro del template se crean etiquetas cuyo texto sera remplazado cuando se renderice el template. asi:
			<slot name="text">Alert</slot> (Si no se envia ningun "text" se mostrara Alert)

			- Dentro del component se llama asi:
				<span slot="text"> El Valor </span> y en el DOM el slot se remplazara por el span




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

BEM: Block Element Modifier

Es una metologia para la creacian de componente reusables y codigo compartible en el desarrollo front end.
Se trata de una convencion para nombrar las clases que ayuda a hacer el codigo mas facil de leer, comprender, facilita el trabajo, la escablabioliad y lo hace mas robusto, explicito y estricto.
	

	¿Porque BEM en lugar de otras?

	- Mas clara
	- Provee un buena base de arquitecutra para codigo.
	- Usa terminologia mas reconocible

- Block: 

	Entidad standaolne que tiene significado por si misma. (header, container, menu, checkbox)

- Element:
	
	Parte de un bloque que no tiene significado por si solo y esta semanticamente vinculada a un bloque. (menu item, list item) {Se deben indicar con dos guiones bajos)

- Modifier:
	
	Una bandera en un bloque o un elemento. Usado para cambiar apariencia o comportameinto. (disbaled, big, blue) {se indica con dos guiibes)}

Ej: 
	.main-menu(bloque)
	.main-menu__item (elemento)
	.main-menu--blue (modificador)


*OOCSS (Object Oriented Css)
	
	- Identificar los patrones(Objetos, Componentes)

*Smacss (Scalable Modular Architecture for CSS)
	
	- Html code should be the base.
	- layout (big page sections) .header
	- Modules (componentes, reusables)
	- State (Un modulo existenete se modifica (usualmente a través de js) )
	- Theme (Opcional)

------------------------------------------------------------------------------------------------------------------------------------------------------------

Sass &

Remplaza el selector padre en lugar del "&"

Funcionalidades:

	- Nesting
	- Añdir clase
	- Pseudo clases
	- Selectores combinatorios
	- Contexto 
		button{
			body.page-about {}
		}
	-@at-root : Rompe el nesting
	-Para reforzar especifidad (Si se tienen varias veces la misma clase se aumenta)

----------------------------------------------------------------------------------------------------------------------------------------------------------
Css Transformaations and transitions:

	Poner movimiento en un sitio web debe ser sutil. Que no distraiga al usuario final.

	Transform => Mueven o cambian la aparienci del elemnto.
	Transitions => Suave y gradualmente hacen el cambio

	* Transitions

		Necesitan dos propiedades para que funcionen
			1. transition-property
			2. transition-duration

	Shorthand: 
		transition: [property*] [duration*] [timing-function] [delay]; {* son obligatorias}
	
		property*: Especifica a que propiedad de css la transition va a ser aplicada (none,all,propiedad especifica)

		duration*: cuanto durara la transición (puede ser en s o en ms)

		timing-function: defina la velocidad de la transición durante la duración.

			-ease: lento-rapido-lento
			-linear: Misma velocidad todo el tiempo
			-ease-in: inicia lento
			-ease-out: termina lento
			-ease-in-out: empieza y termina lento
			-steps: (int,start|end) numero de intervalos, start o end
			-step-start: equivale a steps (1,start)
			-step-end: equivale a stepes (1,end)
			-cubic-bezier: función matematica de transicipn

	delay: cuanto tardara la transición en empezar


	*Transforms: Como cambiar un elemento de html de un estado a otro.
		Se puede:
			(2d)
			-rotar
			-mover
			-torcer
			-escalar

		- scale:
			incrementa o decrementa e tamaño de un elemento. se puede scalex scaley o scale (1,1)

		-rotate:
			rota el elemnto ciertos grados
	
		-translate:
			mueve un elemento en alguno de los ejes (valores negativos para mover hacia la direccion opuesta)
		-skew:
			con skew el elemento se inclina hacia una dirección u otra basado en los valores dados para los ejes.

		-transform-origin:
			esta separada de transform pero trabaj en conjunto. Permite especificar la localización origen de la transformacion


