* Keyframes:
	-Permiten que los cambios corran automatica y continuamente en vez de solo responder a un evento.
	-El keyframe recibe un nombre unico.
	-Se usa la propiedad animation para bindear el keyframe con el selector css.
	- El keyfrme se usa como un selector:

		@keyframes animation-unique-name{


		}

	- Dentro del keyframe se usan porcentajes que representan la linea de tiempo de la animación


		@keyframes animation-name {   
  		0% {     
   		  color: pink;   
  		}   
  		50% {     
    		  color: yellow;   
 		} 
  		100% {
   		   color: blue;
  		 }
		}

		Si son solo dos momentos se puede usar from y to


Animation:

	- Los keyframes por si solos no sirven.
	- Se deben incluir algunas propiedades en la propiedad animation (similar a transition):

		animation: duration | timing-function | delay | iteration-count | direction | fill-mode | play-state | name;
		
		* Duration: Cuanto tiempo dura la animación.
		* timing-funcion: Igual que en transition, describe el movimiento de la animación.
		* Delay: Cuanto debe esperar la animación para iniciar
		* iteration-count: cuantas veces se correra la animación puede ser un numero o inifinite
		* direction: Si se debe correr hacia atras, hacia adelante, alternando.
		* fill-mode: El estado cuando la animación no esta corriendo
		* play-state: Determina si la animación esta o no corriendo.
		* name: El nombre del keyframe


------------------------------------------------------------------------------------------------------------------------------------

* Javascript.

	Scope y Context:

		- Todas las funciones en javascript tienen un scope y un contexto asociados.
		- Scope:
			Hace referencia al alcance de la función (visibilidad de las variables). Cada función tiene su propio scope.
			La funciones pueden acceder al scope global.
			
		- Context: Hace referencia al objeto actual dueño del codigo. es el valor de *this*.

	Tipos de datos:

		-var: Define una variable en el scope local
		-let: Define na variable con alcance de bloque
		-const: Define una variable con alcance de bloque pero no permite sobreesctirura

	Hoisting:

		-Es un comportamiento por defecto en el cual se mueven las declaraciones de variables al inicio del scope actual.
		-Solo mueve la declaración, no la inicialización
		- tambien con las funciones pero si son expresiones solo sube la declaración	


	Funciones:

		First class function:

			- En js las funcones son tratadas como objetos y por ende se pueden pasar como parametro y demases.

		Clousures:
			
			- Son cierres del scope, un clousure que sea función interna puede recibir las variables del padre y usarlas pero no al contrario.

		Arrow Functions:

			- Tienen una sintaxis mas corta.
			- No Tienen un contexto independiente sino utilizan el contexto del que la contiene.

	Estructuras de Datos:

		Arreglos: 
			Son estructuras mutables, clasicos arreglos

			Funciones:

				-Map: Crea un nuevo arreglo con el resultado de una función invocada en cada elemento	
				-Filter: Crea un nuevo arreglo con los elementos que pasen la función filtro.
				-Reduce: Usa un acumulador para volver ese arreglo un solo elemento	

		Map: Objetos de vares clave valor.
		
		Sets: Objetos con valores unicos.


	Protoype: 
		- Todos los objetos en JS heredan sus propiedades y metodos de un objeto prtotype.
		- Object.protoype es el prototipo del Object del cual heredan todos los objetos.
		- Se puede modificar propiedades o metodos al objeto prototipo asi todos los objetos con dicho prototipo compartiran los metodos y propiedades


	Events:
		-Cosas que pasan en el html y a las cuales se reacciona.
		- Puede ser accionadas por el usuario o por el browser.

			Proceso:

				1. Capturar el elemento al que se reacciona
				2. A que evento reaccionara
				3. Que hara?